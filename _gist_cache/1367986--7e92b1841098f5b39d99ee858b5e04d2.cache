class BaseView
  constructor: (options) ->
    @bindings = []
    Backbone.View.apply(@, [options])

  _.extend(BaseView.prototype, Backbone.View.prototype, {
    bindTo: (model, ev, callback) ->
      model.bind(ev, callback, @)
      @bindings.push({model: model, ev: ev, callback: callback})

    unbindFromAll: ->
      _.each(@bindings, (binding) ->
        binding.model.unbind(binding.ev, binding.callback)
      )

      @bindings = []    

    dispose: () ->
      @disposeViews()
      @unbindFromAll()
      @unbind()
      @remove()

    renderView: (el, func, view) ->
      $.fn[func].call(el, view.render().el)
      @views ||= []
      @views.push view

    disposeViews: ->     
      if @views
        _(@views).each (view) ->
          view.dispose()
      @views = []
  })

@.BaseView = BaseView

@.BaseView.extend = Backbone.View.extend