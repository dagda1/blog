---
layout: post
title: "Iridium - a toolchain for javascript development'"
date: 2012-08-10 10:31
comments: true
categories: JavaScript Ember
---
I want to give a shout out to a very new and very interesting project called
<a target="_blank" href="https://github.com/radiumsoftware/iridium/">iridium</a> from 
<a target="_blank" href="https://twitter.com/adman65">Adam Hawkins</a> who blogs at
 <a target="_blank" href="http://www.broadcastingadam.com/">BroadcastingAdam</a>.  Iridium aims to provide some much needed tooling to the new front end javascript/coffeescript project type that is popularised by the javascript mv* space.

With more and more of the application code finding its way onto the client in the form of
javascript or coffeescript, there is a necessity to make a clear separation between between the front end client code and the backend server code.  With Gems like the <a href="https://github.com/spastorino/rails-api" target="_blank">rails-api</a> gem stripping away all the cruft that is associated with serving html from a rails application, wouldn't it be nice if you could spin up a new javascript/coffeescript project with just a few keystrokes?
##Problem 1 - Lack of Front End Project Guidance##
Gone are the days (I wish) when client side code and server side code lived side by side in a one size fits all monolithic project structure.  Good practice dictates that you should segregate these two distinct layers
into two (or more) orthogonal projects that can evolve at their own pace. I can quickly create a rails project by issuing a command like 
{%codeblock%}
rails new project_name
{%endcodeblock%}
Rails brought conformity to the mvc pattern by creating a guaranteed project structure for every rails project.  Wouldn't it be nice if we could bring some order to the new breed of client side only project?
##The Solution##
<a target="_blank" href="https://github.com/radiumsoftware/iridium/">Iridium</a> aims
to add some much needed tooling to the front end project space and sets out with the
following goals:-

- CLI driven interactions
- Expose as little Ruby as possible
- Focus on JS/CSS/HTML
- Make JS testable

###First Steps###
The first thing to do is to ensure that you have <a href="http://casperjs.org/" target="_blank">casperjs</a> installed.  Casperjs is what iridium uses as its integration test framework.  Full installation details can be found <a href="http://casperjs.org/installation.html" target="_blank">here</a>.  I personally used homebrew to install casperjs.

Next, you need to create a Gemfile with the following entries:
{% gist 3313904 %}
I created an instance of the above Gemfile in my **~/projects** directory so that I can easily create front end projects from that location.

A quick **bundle install** will install the specified gems and then you can start using iridium.

Iridium solves the first problem by allowing me to spin up a new client side project with most of the initial decision making made for me.

I can be up and running by simply entering the following command while in the project directory.
{% codeblock %}
bundle exec iridium app test
{% endcodeblock %}
Not that I am using **bundle exec**, do not pass go if you are running under the current Gemfile context.

The above command will create the following output:
{% blockquote %}
create  app
 create  app
       create  app/images
       create  app/javascripts/app.coffee
       create  app/javascripts/boot.coffee
       create  app/javascripts/controllers
       create  app/javascripts/models
       create  app/javascripts/templates
       create  app/javascripts/views
       create  app/public
       create  app/stylesheets/app.scss
       create  app/vendor/javascripts
       create  app/vendor/javascripts/handlebars.js
       create  app/vendor/javascripts/jquery.js
       create  app/vendor/javascripts/minispade.js
       create  app/vendor/stylesheets
       create  site
       create  test
       create  test/controllers
       create  test/helper.coffee
       create  test/integration/navigation_test.coffee
       create  test/models
       create  test/support/qunit.js
       create  test/support/sinon.js
       create  test/templates
       create  test/unit/truth_test.coffee
       create  test/views
       create  application.rb
       create  readme.md
       create  .gitignore
{% endblockquote %}

This will create the following project structure:
{%img /images/iridium/structure.png%}
Not only can we now guarantee where everything in our client project lives but iridium has also provided some smart defaults for us:

- We will be using <a href="http://sass-lang.com/" target="_blank">SASS</a> as the css framework of choice and an **app.scss** file is created in **app/stylesheets/app.scss**.
- There is a clear separation between unit and integration tests.
- We will be using <a href="http://qunitjs.com/" target="_blank">QUnit</a> for unit tests.
- We will be using <a href="http://casperjs.org/" target="_blank">Casperjs</a> for integration tests.  Integration tests are often overlooked in the front end world.
- <a href="sinonjs.org" target="_blank">sinon.js</a> is injected into the test environment and is used to mock or stub out any async calls when unit testing.
- The <a href="http://rubydoc.info/github/livingsocial/rake-pipeline/master/file/README.yard" target="_blank">Rake-pipeline</a> is used for javascript loading and for packaging assets for deployment.

###The Case for the Rake-Pipeline###
The rake-pipeline is a better fit for single page applications than an asynchronous module loader like <a herf="http://requirejs.org/" target="_blank">requirejs</a> because it bundles all your dependencies and individual files into a single script.  Rails does all this concatenation and minification transparently behind the scenes without you having to do anything at all.  Using the rails asset pipeline eases rolling deployment for you because while in development scripts are served as individual files without minification and in production scripts are served as minified and concatenated.

I prefer the rake-pipeline over <a herf="http://requirejs.org/" target="_blank">requirejs</a> because requirejs is great in development and satisfies the requirement of being able to break the functionality up into smaller files **but** and I must stress the word but, it is at this time of writing, a major pain in the rear to compile requirejs out for a production build.  You are going to have to use something like the <a href="https://github.com/jrburke/r.js/" target="_blank">r.js compiler</a> to bundle all your dependencies into a single script.

With a combination of the <a href="http://rubydoc.info/github/livingsocial/rake-pipeline/master/file/README.yard" target="_blank">Rake-pipeline</a>, <a href="https://twitter.com/wycats" target="_blank">@wycat's</a> <a href="https://github.com/wycats/rake-pipeline-web-filters" target="_blank">rake-pipeline-web-filters</a> and <a href="https://github.com/wycats/minispade" target="_blank">minispade</a> we can achieve the following goals:
 
- *Break it up*: While it’s common to write smaller libraries as one big file, I like the mental separation provided by dividing the source into multiple files.
- *Inline dependency management*: I’d rather define each file’s dependencies right in the code than define the concatenation order in some sort of makefile.
- *Keep files separate while debugging*: When we’re setting breakpoints and stepping through code in the debugger we want to see our individual source files, not have to wade through one big file.
- *A transparent solution*: We need the production library to be free from dependency management code.

With the above combination, I can develop my code in separate files and then I can prefix my code with minispade **require** statements like below:
{% codeblock %}
require 'app/router'
require 'app/controllers/application'
require 'app/views/application'
{% endcodeblock %}
When you create an iridium project, iridum is already hooked up and minispade.js can be found in **app/vendor/minispade.js**.

The above is valid coffeescript and I can simply point to one file in development with all my requires. 
##app.coffeee and boot.coffee##
A nice conventions is created for you when you create a new iridium project that really helps when it comes to testing.  A file named **app.coffee** is created for you where you can put all your minispade require statements as was outlined above.  Then, when it comes to testing, this file is hooked up for you in the test environment.  No initialisation code goes into this file, just the minispade require statements.  A separate file named **boot.coffee** is created to house any application start up code.  The **boot.coffee** is not referenced by the test environment, paving the way for you to unit test separate bits of the application rather than having to **boot** the whole thing.

An example of the **app.coffee** file that is referenced by both the testing environment and the actual website itself could look like this:
{% codeblock %}
require 'app/router'
require 'app/controllers/application
require 'app/views/application'
{% endcodeblock %}
And an example of **boot.coffee** could look like this, with the code initialising an <a href="http://emberjs.com/">emberjs</a> applicaiton:"
{%codeblock%}
require 'application/app'
Application.initialize()
{%endcodeblock%}
###Index.html###
**index.html** is an annoying part of web development. You cannot start or serve your application without an HTML page to load your JS. Iridium has a built in index.html which loads your assets and dependencies. This will work for most simple applications. You can override this by providing your own index.html in public. 

Once you have generated your application, you can run the built in development server like so:
{%codeblock%}
bundle exec iridium server
{%endcodeblock%}
Which will give you the following output:
{%blockquote%}
$ cd application
$ iridium server
>> Thin web server (v1.4.1 codename Chromeo)
>> Maximum connections set to 1024
>> Listening on 0.0.0.0:9292, CTRL+C to stop
{%endblockquote%}
##Problem 2 - Testing the client code##
The rise of the client side MV* framework and the proliferation of code on the client has made the call test, a more important one than ever.  The tide does appear to be turning on testing client code with the rise of important testing frameworks like <a href="http://pivotal.github.com/jasmine/" target="_blank">Jasmine</a> and <a href="http://qunitjs.com/" target="_blank">QUnit</a> but adoption of this practice could be better.  Part of the difficulty is getting set up.  Why should I have to concern myself with wiring everything together, every time I start a new project.  Anybody who initially wrestled with Jasmine and the rails asset pipeline will know exactly what I mean when by **wrestling**.

Anybody from a rails background will be comfortable with running particular flavours of
test suites (unit/integration/functional) via rake's uniform command line interface.
  Iridium gives you the same capabilities and makes the clear distinction between unit tests and integration tests.
  
Projects like <a href="sinonjs.org" target="_blank">sinon.js</a> or <a href="https://github.com/appendto/jquery-mockjax/" target="_blank">jquery-mockajax</a>
  provide a means to stub out or mock the server side the API calls that are either not yet available or not applicable for writing resource free unit tests.